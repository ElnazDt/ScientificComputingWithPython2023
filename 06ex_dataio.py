# -*- coding: utf-8 -*-
"""06ex_dataio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DDgvbRW1yzqwgxUNow1B0QbD2J3NnTkc

1\. **Text files**

Perform the following operations on plain `txt` files:

+ create a list of integrer numbers and then save it to a text file named `data_int.txt`. Run the `cat` command to print the content of the file.
+ create a matrix of 5x5 floats and then save it to a text file named `data_float.txt`. Use the `cat` command to print the content of the file.
+ load the `txt` file of the previous point and convert it to a `csv` file by hand.
"""

out_file_name_int = "/content/sample_data/data_int.txt"

with open(out_file_name_int, 'w') as outfile:
  for i in range(15):
    outfile.write(f'{i} ')
print('data_int.txt : ')
!cat /content/sample_data/data_int.txt


out_file_name_float = "/content/sample_data/data_float.txt"
with open(out_file_name_float, 'w') as outfile:
  for i in range(5):
    for j in range(5):
      outfile.write(f'{i+0.2*i} ')
    outfile.write('\n')

print('\n data_float.txt : ')
!cat /content/sample_data/data_float.txt

"""2\. **JSON files**

Load the file `user_data.json`, which can be found at:

- https://www.dropbox.com/s/sz5klcdpckc39hd/user_data.json

and filter the data by the "CreditCardType" when it equals to "American Express". Than save the data to a new CSV file.
"""

!wget 'https://www.dropbox.com/s/sz5klcdpckc39hd/user_data.json' /content/user_data.json

import json as js
import pandas as pd

data = js.load(open('/content/user_data.json'))
print(type(data))
df = pd.Series({})
for item in data:
  if(item['CreditCardType']=='American Express'):
    df=pd.concat([df,pd.Series(item)],axis=1)
df = df.transpose()
df=df.iloc[1:].reset_index(drop=True)

df.to_csv('/content/user_data.csv')

"""3\. **CSV files with Pandas**

Load the file from this url:

- https://www.dropbox.com/s/kgshemfgk22iy79/mushrooms_categorized.csv

with Pandas.

+ explore and print the DataFrame
+ calculate, using `groupby()`, the average value of each feature, separately for each class
+ save the file in a JSON format.
"""

!wget https://www.dropbox.com/s/kgshemfgk22iy79/mushrooms_categorized.csv

import pandas as pd
import urllib.request
url = 'https://www.dropbox.com/s/kgshemfgk22iy79/mushrooms_categorized.csv'

df = pd.read_csv('/content/mushrooms_categorized.csv')
df = df.groupby('class').mean()
df.to_json('/content/mushrooms_categorized.json')

"""4\. **Reading a database**

Get the database `sakila.db` from the lecture `06_dataio.ipynb`, and import the table `actors` as a Pandas dataframe. Using the dataframe, count how many actors have a first name that begins with `A`.

*Hint:* use the Series `.str` method to apply the Python string methods to the elements of a Series, see [documentation](https://pandas.pydata.org/docs/reference/api/pandas.Series.str.html).
"""

!wget https://gist.github.com/Piyush3dB/726bf7012785d6e0fd691c3655c92654/raw/2c17ccb2eb33b3396bfa96284c53f0718a4ea62c/sakila.db -P ./data/

import sqlite3 as sql

# create a connection to the database and a cursor to execute queries
conn = sql.connect('data/sakila.db')
cur = conn.cursor()

# query data from database: select all content from the table "actor"
query = "SELECT * FROM actor"
results = cur.execute(query).fetchall()

# create a DataFrame from the DB data
df = pd.DataFrame(results)

# close the cursor and connection
cur.close()
conn.close()

# print dataframe
df

starting_with = df[df[1].str.contains(r'(^[Aa])')]
count_of_actors_with_a = starting_with[1].count()
print(count_of_actors_with_a)

"""5\. **Reading the credit card numbers**

Get the binary file named `credit_card.dat` from this address:

- https://www.dropbox.com/s/8m0syw2tkul3dap/credit_card.dat

and convert the data into the real credit card number, knowing that:
- each line corresponds to a credit card number, which consists of 16 characters (which are numbers in the 0-9 range) divided in 4 blocks, with a whitespace between each block
- each character is written using a 6 bit binary representation (including the whitespace)
- the final 4 bits of each line are a padding used to determine the end of the line, and can be ignored

*Hint*: convert the binary numbers to the decimal representation first, and then use the `chr()` function to convert the latter to a char
"""

!wget https://www.dropbox.com/s/8m0syw2tkul3dap/credit_card.dat

datContent = [i for i in open("/content/credit_card.dat").readlines()]
convertedArrayOfCreditCards = []
for x in datContent:
  creditCardNumber = ''
  for j in range(0,len(x)-6,6):
    t=x[j:j+6]
    creditCardNumber+=chr(int(t,2))
  convertedArrayOfCreditCards.append(creditCardNumber)

for card in convertedArrayOfCreditCards:
  print(card,'\n')

"""6\. **Write data to a binary file**

a) Start from the `data/data_000637.txt` file that we have used during the previous lectures, and convert it to a binary file according to the format defined below:
"""

from IPython.display import Image
Image("/content/data_format.png")

"""*Hints*:
- Read the first 10 lines using Pandas
- Iterate over the DataFrame rows
- For every row, "pack" the values (features) into a single 64-bit word, according to the format specified above. Use bit-wise shifts and operators to do so.
- Write each 64-bit word to a binary file. You can use `struct` in this way:
```
binary_file.write( struct.pack('<q', word) )
```
where `word` is the 64-bit word.
- Close the file after completing the loop.

b) Check that the binary file is correctly written by reading it with the code used in the lecture `06_dataio.ipynb`, and verify that the content of the `txt` and binary files is consistent.

c) What is the difference of the size on disk between equivalent `txt` and binary files?
"""

